@using GoogleMapsComponents
@using GoogleMapsComponents.Maps
@using CotacolApp.Services.Extensions
@inject ILogger<ClimbListMapComponent> Logger
@inject IJSRuntime JsRuntime

@if (Climbs != null)
{
    <div @ref="@mapElementRef" id="map1" style="height: 450px"></div>
}
else
{
    <span>
        <em>Loading map...</em>
    </span>
}


@code {
    private MapOptions mapOptions;
    private MapService _mapService = new MapService();

    private IEnumerable<UserClimb> climbList;
    private ElementReference mapElementRef;
    private Map map1;
    private int _currentzoom = 9;
    private int polylineTreshold = 10;

    [Parameter]
    public IEnumerable<UserClimb> Climbs
    {
        get => climbList;
        set
        {
            if (value == null || (climbList?.Equals(value) ?? false)) return;
            Logger.LogInformation($"[Setter], number {value.Count()}");
            map1 = null;
            climbList = value;
            ClimbsChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<IEnumerable<UserClimb>> ClimbsChanged { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (climbList == null) Logger.LogWarning("[Initialize] climbList is null");

        mapOptions = await _mapService.GetLayoutAsync(false, _currentzoom);
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (map1 == null)
        {
            await InitializeMap();
        }
        var currentzoom = await map1.GetZoom();
        if (firstRender ||
            ((currentzoom < polylineTreshold) != (_currentzoom < polylineTreshold)))
        {
            Logger.LogInformation($"Plotting lines: {_currentzoom} < {polylineTreshold} && {currentzoom} != {_currentzoom}");
            await ShowClimbsAsync(_currentzoom,
                _currentzoom < polylineTreshold && currentzoom != _currentzoom);
            Logger.LogInformation($"[Render]After show climbs");
        }
        _currentzoom = currentzoom;
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task InitializeMap()
    {
        Logger.LogInformation($"[Render]Creating new map");
        mapOptions = await _mapService.GetLayoutAsync(false, _currentzoom);
        map1 = await Map.CreateAsync(JsRuntime, mapElementRef, mapOptions);
        await map1.AddListener("zoom_changed", OnZoomChanged);
    }

    private async Task ShowClimbsAsync(int previousZoom, bool plotLines, bool centerMap = false)
    {
        Logger.LogInformation("Showing climbs");
        if (climbList != null && map1 != null)
        {
            await _mapService.ClearClimbsAsync();
            var tasks = new List<Task> {};
            tasks.AddRange(climbList.Select(
                userClimb => _mapService.ShowClimbAsync(map1, JsRuntime, userClimb, plotLines, false)));
            await Task.WhenAll(tasks);
            await _mapService.ClusterMarkersAsync(map1, JsRuntime, centerMap);
        }
    }

    private async Task OnAfterInitAsync()
    {
        if (map1 != null)
        {
            var zoom = await map1.GetZoom();
            await map1.AddListener("zoom_changed", OnZoomChanged);
            Logger.LogInformation("Enabled zoom change listener, current zoom {zoom}");
        }
    }

    private void OnZoomChanged()
    {
        Logger.LogInformation("Zoom");
        StateHasChanged();
    }

}