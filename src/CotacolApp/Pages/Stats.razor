@page "/stats"
@using MatBlazor
@using CotacolApp.Models.CotacolApi
@inject ICotacolClient CotacolClient
@inject IUserProfileManager UserProfile

<h1>Crunching numbers</h1>

@if (!UserProfile.IsAuthenticated)
{
    <p>
        <em>Since you are not a registered user, user names and activity details are hidden for user privacy.</em>
    </p>
}

@if (stats == null)
{
    <p>
        <em>Loading climbs...</em>
    </p>
}
else
{
    <MatTabGroup @bind-ActiveIndex="@tabIndex">
        <MatTab Label="Leader board">
            <h2>Leaderboard</h2>
            <MatTable FilterByColumnName="Name" Items="@stats.Users" class="table" PageSize="100"
                      ShowPaging="false" UseSortHeaderRow="true">
                <MatTableHeader>
                    <MatSortHeaderRow SortChanged="SortLeaders">
                        <MatSortHeader SortId="position">#</MatSortHeader>
                        <MatSortHeader SortId="name">
                            <span style="width:600px">Hunter</span>
                        </MatSortHeader>
                        <MatSortHeader SortId="points">Total Points</MatSortHeader>
                        <MatSortHeader SortId="climbs">Unique Climbs</MatSortHeader>
                    </MatSortHeaderRow>
                </MatTableHeader>
                <MatTableRow>
                    <td>@context.Position</td>
                    <td>
                        <b>@PrintName(context)</b>
                    </td>
                    <td>@context.TotalPoints</td>
                    <td>@context.UniqueCols</td>
                </MatTableRow>
            </MatTable>
        </MatTab>
        <MatTab Label="Col popularity">
            <h2>Climb popularity</h2>
            <MatTable FilterByColumnName="Name" Items="@stats.Cotacols" class="table" PageSize="100"
                      ShowPaging="false" UseSortHeaderRow="true">
                <MatTableHeader>
                    <MatSortHeaderRow SortChanged="SortClimbs">
                        <MatSortHeader SortId="name">
                            <span style="width:600px">Name</span>
                        </MatSortHeader>
                        <MatSortHeader SortId="userCount">Users</MatSortHeader>
                        <MatSortHeader SortId="attemptCount">Total attempts</MatSortHeader>
                    </MatSortHeaderRow>
                </MatTableHeader>
                <MatTableRow>
                    <td>
                        <b>@context.CotacolName</b>
                    </td>
                    <td>@context.UniqueUsers &nbsp;&nbsp;
                        @if (ColHasLocalLegends(context.CotacolId))
                        {
                            <span class="oi oi-star" aria-hidden="true" title="@PrintLocalLegends(context.CotacolId)"></span>
                        }
                    </td>
                    <td>@context.TotalAttempts</td>
                </MatTableRow>
            </MatTable>
        </MatTab>
        <MatTab Label="Toughest activities">
            <h2>Toughest activities</h2>
            <MatTable Items="@stats.Activities" class="table" PageSize="100"
                      ShowPaging="false" UseSortHeaderRow="true">
                <MatTableHeader>
                    <MatSortHeaderRow SortChanged="SortActivities">
                        <MatSortHeader SortId="name">Hunter</MatSortHeader>
                        <MatSortHeader SortId="date">Date</MatSortHeader>
                        <MatSortHeader SortId="cols">Cols</MatSortHeader>
                        <MatSortHeader SortId="points">Points</MatSortHeader>
                    </MatSortHeaderRow>
                </MatTableHeader>
                <MatTableRow>
                    <td style="min-width: 240px">
                        <b>@PrintName(context)</b>
                    </td>
                    <td style="min-width: 240px">
                        @if (UserProfile.IsAuthenticated)
                        {
                            <a href="@context.ActivityUrl" target="_blank">@context.ActivityDate.ToString("D")</a>
                        }
                        else
                        {
                            @context.ActivityDate.ToString("D")
                        }
                    </td>
                    <td>@context.UniqueCols</td>
                    <td>@context.TotalPoints</td>
                </MatTableRow>
            </MatTable>
        </MatTab>
    </MatTabGroup>
}

@code {
    private SiteStats stats = null;
    public int tabIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        stats = await CotacolClient.GetStatsAsync();
    }

    private string GetName(string fullName, string userName)
    {
        if (UserProfile.IsAuthenticated)
        {
            if (!string.IsNullOrEmpty(fullName))
                return fullName;
            if (!string.IsNullOrEmpty(userName))
                return userName;
            return "Anonymous";
        }
        if (!string.IsNullOrEmpty(fullName))
        {
            var result = "";
            foreach (var namePart in fullName.Split(' '))
            {
                if (!string.IsNullOrEmpty(namePart))
                {
                    var newChar = namePart[0];
                    if (newChar < 128)
                        result += newChar;
                }
            }
            return result;
        }
        return "Anonymous";
    }

    private string PrintName(UserStatistics user)
    {
        return GetName(user.FullName, user.UserName);
    }

    private string PrintName(Activity activity)
    {
        return GetName(activity.FullName, activity.UserName);
    }

    private void SortLeaders(MatSortChangedEvent sort)
    {
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)) && stats != null)
        {
            switch (sort.SortId)
            {
                case "points":
                    stats.Users = sort.Direction == MatSortDirection.Asc ?
                        stats.Users.OrderBy(c => c.TotalPoints).ToList() :
                        stats.Users.OrderByDescending(c => c.TotalPoints).ToList();
                    break;
                case "climbs":
                    stats.Users = sort.Direction == MatSortDirection.Asc ?
                        stats.Users.OrderBy(c => c.UniqueCols).ToList() :
                        stats.Users.OrderByDescending(c => c.UniqueCols).ToList();
                    break;
            }
        }
    }
    private void SortActivities(MatSortChangedEvent sort)
    {
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)) && stats != null)
        {
            switch (sort.SortId)
            {
                case "date":
                    stats.Activities = sort.Direction == MatSortDirection.Asc ?
                        stats.Activities.OrderBy(c => c.ActivityDate).ToList() :
                        stats.Activities.OrderByDescending(c => c.ActivityDate).ToList();
                    break;
                case "cols":
                    stats.Activities = sort.Direction == MatSortDirection.Asc ?
                        stats.Activities.OrderBy(c => c.UniqueCols).ToList() :
                        stats.Activities.OrderByDescending(c => c.UniqueCols).ToList();
                    break;
                case "points":
                    stats.Activities = sort.Direction == MatSortDirection.Asc ?
                        stats.Activities.OrderBy(c => c.TotalPoints).ToList() :
                        stats.Activities.OrderByDescending(c => c.TotalPoints).ToList();
                    break;
            }
        }
    }
    private void SortClimbs(MatSortChangedEvent sort)
    {
        if (!(sort == null || sort.Direction == MatSortDirection.None || string.IsNullOrEmpty(sort.SortId)) && stats != null)
        {
            switch (sort.SortId)
            {
                case "userCount":
                    stats.Cotacols = sort.Direction == MatSortDirection.Asc ?
                        stats.Cotacols.OrderBy(c => c.UniqueUsers).ToList() :
                        stats.Cotacols.OrderByDescending(c => c.UniqueUsers).ToList();
                    break;
                case "attemptCount":
                    stats.Cotacols = sort.Direction == MatSortDirection.Asc ?
                        stats.Cotacols.OrderBy(c => c.TotalAttempts).ToList() :
                        stats.Cotacols.OrderByDescending(c => c.TotalAttempts).ToList();
                    break;
            }
        }
    }

    private bool ColHasLocalLegends(string colId)
    {
        var legendcol = stats.Cotacols.FirstOrDefault(col => col.CotacolId.Equals(colId));
        return legendcol?.LocalLegends?.Any() ?? false;
    }

    private string PrintLocalLegends(string colId)
    {
        var legendcol = stats.Cotacols.FirstOrDefault(col => col.CotacolId.Equals(colId));
        if (legendcol?.LocalLegends?.Any() ?? false)
        {
            return $"{string.Join(", ", legendcol.LocalLegends.Select(leg => leg.UserName))} ({legendcol.LocalLegends.First().Attempts})";
        }
        return "";
    }

}